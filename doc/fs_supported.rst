
Remove the support of reiserfs from the kernel
==============================================

We need to remove the support of reiserfs from the kernel. Go to the kernel source tree and run make menuconfig. Remove the support for ext2 file system and recompile the kernel by running ``make`` ``make modules`` ``make modules`` ``make modules_install``

Reboot the system

Making a file system of type ext2
=====================================

``mkfs.ext2 /dev/sda`` #we have made ext2 file system as it does not have support in the kernel. 

Try to mount the file system
============================

``mount /dev/sda -t ext2``

The command will fail as the kernel does not recognize the rieser fs file system. This is the concept of the "registering file systems". When you compile kernel with the support of any file system it means that we register the file system with the kernel. When kernel is instructed to mount a file system of it checks the file system type with that of a registered file system. It fails to find the module or the code related to the file system and thus it is not able to mount the file system. Let us see the ".config" file generated by the kernel 

grep  "reiserfs" .config

After adding support

grep "reiserfs" .config

Let us get the list of the supported

cat /proc/filesystems

Let us try to find out the list by writing our kernel code using a module.

Exercise - write a proc interface similar to the /proc/filesystems 

Now let us try to find the file systems which are mounted on the sysstem.

We have a command to find it
"mount" which does it for you. We will see the code of the mount utility and find out how does it do it.

Now let us try to implement a part of the mount utility where it tries to list the file systems which are mounted on the system.

Doing this exposes one more data structure present in the VFS layer the vfs mount structure which keeps a track of the file systems mounted on the system. 

Mount utility
-------------

Mount uses the system call mount() for mounting the file systems. The mount utility first checks if the file system type has been provided or not. If yes then it makes the arguements for the system call and then calls the system call ``mount()`` else it calls the ``blkid`` utility for finding the type of the file system the device has. The mount command actually uses the functions provided by the ``libblkid`` to find the file system type.

The ``blkid`` utility provided the right file system type to be passed to the mount system call and the utility is then called.

The mount system call internally calls the ``get_fs_type()`` function which checks the file system type passed against the file systems currently supported by the kernel. By currently we mean the code for rhe file systems which are initialized in the kernel, note that some file systems may be compiled as a kernel module and thus will be available only when the kernel loads the module.

If the function ``get_fs_type`` could find the file system then it proceeds with mounting the file system else it calls the function ``request_module`` which calls ``__request_module`` which invokes the ``modprobe`` utility from user space with the module name and gets the module loaded. The mount system call waits till the module gets loaded. 

When the file system module gets loaded the it calls the ``register_filesystem`` function which adds the file system to the singly linked list ``file_systems``.


To install libblkid use

``sudo apt-get install libblkid-dev``
