Mounting 
======== 
When ever you have to access a block device which has a file system on it, you
will have to mount that block device. The kernel needs to know the tyoe of the file system present
on the block device so that it can use appropriate functions, specific functions to access the file
system. Whenever you mount any file system you need to specify the device you want to mount, the
location where you want to mount, the file system type on the block device and the parameters you
want to use when you mount the file system. The parameters can be used to specify the file system
will be READ-ONLY or READ-WRITE

When a file system is mounted then the kernel makes the file system available under the mounted-on
directory. A specific data structure vfsmount is used to keep the information about the mounted file
systems. We here will see some concepts about mounting the file system.

Let us see some concepts related to mounting the file system.



Remove the support of reiserfs from the kernel
==============================================

We need to remove the support of reiserfs from the kernel. Go to the kernel source tree and run make
menuconfig. Remove the support for ext2 file system and recompile the kernel by running ``make``
``make modules`` ``make modules`` ``make modules_install``

Reboot the system

Making a file system of type ext2 
=====================================

``mkfs.ext2 /dev/sda`` #we have made ext2 file system as it does not have support in the kernel. 

Try to mount the file system 
============================

``mount /dev/sda -t ext2``

The command will fail as the kernel does not recognize the rieser fs file system. This is the
concept of the "registering file systems". When you compile kernel with the support of any file
system it means that we register the file system with the kernel. When kernel is instructed to mount
a file system of it checks the file system type with that of a registered file system. It fails to
find the module or the code related to the file system and thus it is not able to mount the file
system. Let us see the ".config" file generated by the kernel 

grep  "reiserfs" .config

After adding support

grep "reiserfs" .config

Let us get the list of the supported

cat /proc/filesystems

Let us try to find out the list by writing our kernel code using a module.

Exercise - write a proc interface similar to the /proc/filesystems 

Now let us try to find the file systems which are mounted on the sysstem.

We have a command to find it "mount" which does it for you. We will see the code of the mount
utility and find out how does it do it.

Now let us try to implement a part of the mount utility where it tries to list the file systems
which are mounted on the system.

Doing this exposes one more data structure present in the VFS layer the vfs mount structure which
keeps a track of the file systems mounted on the system. 



Mount utility 
-------------

Mount uses the system call mount() for mounting the file systems. The mount utility first checks if
the file system type has been provided or not. If yes then it makes the arguements for the system
call and then calls the system call ``mount()`` else it calls the ``blkid`` utility for finding the
type of the file system the device has. The mount command actually uses the functions provided by
the ``libblkid`` to find the file system type.

The ``blkid`` utility provided the right file system type to be passed to the mount system call and
the utility is then called.

The mount system call internally calls the ``get_fs_type()`` function which checks the file system
type passed against the file systems currently supported by the kernel. By currently we mean the
code for rhe file systems which are initialized in the kernel, note that some file systems may be
compiled as a kernel module and thus will be available only when the kernel loads the module.

If the function ``get_fs_type`` could find the file system then it proceeds with mounting the file
system else it calls the function ``request_module`` which calls ``__request_module`` which invokes
the ``modprobe`` utility from user space with the module name and gets the module loaded. The mount
system call waits till the module gets loaded. 

When the file system module gets loaded the it calls the ``register_filesystem`` function which adds
the file system to the singly linked list ``file_systems``.


To install libblkid use

``sudo apt-get install libblkid-dev``

File System Registration 
========================

Whenever a file system loads into kernel it calls the function ``register_filesystem``. The function
``register_filesystem`` is exported in the kernel. For example if you see the code of
``init_ext2_fs`` in ext2 file system you will find it calling the function.

The kernel mainatains a list of the file systems currently supported. File systems which are
compiled into the kernel gets added to the list when the system starts while the file systems which
are compiled as module gets loaded in the runtime.

The list is a singly linked list with the head defined as ``struct file_system_type *fs``. You can
see the address of the variable using the file ``/proc/kallsyms`` 

::

    # cat /proc/kallsyms | grep file_sys c0d8b634 b file_systems

The list is read by the file ``/proc/filesystems``. As an exercise we will try to list all the file
systems currently supported by the kernel by traversing through the list.

Get the list of currently supported file systems 
================================================


Let us write some code to find the file systems supported by the kernel.


Get the list of currently mounted file systems
==============================================

the ``mount`` utility reads the ``/etc/mtab`` file to print the file systems which are currenttly
mounted on the system. We will write code to print the file systems mounted on the system, but we
will read the kernel data stuctures to do it. ``/proc/mounts`` is another place where you can get
the information about mounted file system.


namespaces  - http://lwn.net/Articles/531114/


vfsmount  -- http://www.win.tue.nl/~aeb/linux/lk/lk-8.html


